{"/home/travis/build/npmtest/node-npmtest-specify/test.js":"/* istanbul instrument in package npmtest_specify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-specify/lib.npmtest_specify.js":"/* istanbul instrument in package npmtest_specify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_specify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_specify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-specify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-specify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_specify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_specify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_specify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_specify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_specify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_specify.__dirname +\n                    '/lib.npmtest_specify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-specify/node_modules/specify/specify.js":"var assert     = require('assert')\n  , domain     = require('domain')\n  , esprima    = require('esprima')\n  , path       = require('path'), colors\n  , reporters  = {}\n  , assertions =\n    [ 'ok', 'equal', 'notEqual', 'deepEqual', 'notDeepEqual'\n    , 'strictEqual', 'notStrictEqual', 'ifError']\n  , err_count  = 0\n  , MAX_ERRORS    = process.env.SPECIFY_MAX_ERRORS    || 1000\n  , CHECK_GLOBALS = process.env.SPECIFY_CHECK_GLOBALS ? true : false\n  , GLOBALS       = Object.keys(global)\n  , startTime\n  ;\n\n// read available reporters\nrequire('fs').readdirSync(path.join(__dirname, 'reporters'))\n  .forEach(function(reporter) {\n    reporters[reporter]=require(path.join(__dirname, 'reporters', reporter));\n});\n\nmodule.exports = (function specify() {\n  var cache     = []\n    , counts    = { _totals: {ok: 0, fail: 0, notrun: 0, thrown: 0} }\n    , spec, summary, def_summary, timer, current_domain\n    , default_reporter = process.env.SPECIFY_REPORTER\n      ? Object.keys(reporters)\n        .indexOf(process.env.SPECIFY_REPORTER + \".js\") === -1\n        ? 'default'\n        : process.env.SPECIFY_REPORTER\n      : 'default'\n    ;\n\n  def_summary = summary = reporters[default_reporter + '.js'];\n\n  function ensure_for(test, expect, tests, done) {\n    var ensure = {}, count  = expect, errored = [];\n    counts[test] = {ok: 0, fail: 0, notrun: 0, thrown: 0};\n    counts[test].meta = {name: test, expected: expect, remaining: tests};\n    counts[test].meta.errored = errored;\n    counts[test].meta.remaining_assertions = expect;\n\n    assertions.forEach(function(assertion) {\n      ensure[assertion] = function () {\n        if(counts[test].thrown > 0) {\n          return;\n        }\n        try {\n          assert[assertion].apply(this,arguments);\n          counts._totals.ok++;\n          counts[test].ok++;\n        }\n        catch (err) {\n          errored.push({ msg: err.message\n            , assert: assertion, args: [].slice.call(arguments,0)});\n          counts._totals.fail++;\n          counts[test].fail++;\n        }\n        count--;\n        counts[test].meta.remaining_assertions = count;\n        if(count === 0) {\n          done(errored);\n        }\n      };\n    });\n\n    ensure.expect = function (nr) { count = nr; };\n    return ensure;\n\n  }\n\n  function check_globals () {\n    var end_globals = Object.keys(global)\n      , leaks = end_globals.filter(function (eg) {\n        return !~GLOBALS.indexOf(eg);\n      });\n    return leaks;\n  }\n\n  //\n  // lifted from esprima's `detectnestedternary` example\n  //\n  function traverse(object, visitor) {\n    var key\n      , child\n      ;\n\n    visitor.call(null, object);\n    for (key in object) {\n      if (object.hasOwnProperty(key)) {\n        child = object[key];\n        if (typeof child === 'object' && child !== null) {\n          traverse(child, visitor);\n        }\n      }\n    }\n  }\n\n  function run_tests(tests) {\n      if(timer) {\n        clearTimeout(timer);\n        timer = undefined;\n      }\n      if(tests.length === 0) {\n        var leaks = check_globals();\n        leaks.forEach(function (leak) {\n          console.log('leak detected: ' + leak);\n        });\n        counts._totals.duration = Date.now() - startTime;\n        summary('summary', counts._totals);\n        process.exit(counts._totals.fail === 0 ? 0 : -1);\n      }\n      else {\n        var test    = tests.shift()\n          , name    = test[0]\n          , timeout = test[1]\n          , f       = test[2]\n          , expect\n          ;\n        if(typeof timeout === \"function\") {\n          f = timeout;\n          timeout = undefined;\n        }\n        // Need to add () so that it's a complete JS script\n        var program = esprima.parse(\"(\" + f.toString() + \")\")\n          , vari\n          ;\n\n        // Get argument identifiers from the function passed to specify\n        if (program.body[0].expression.type === \"FunctionExpression\") {\n          vari = program.body[0].expression.params.map(function(value) {\n            return value.name;\n          });\n        }\n\n        if(Array.isArray(vari) && vari.length > 0) {\n          // Traverse program looking for assert.* function calls\n          var numberOfAsserts = 0\n            , expected        = false\n            ;\n          traverse(program, function(node) {\n            if (node.type === 'MemberExpression' &&\n                node.object.name === vari[0] &&\n                assertions.indexOf(node.property.name) !== -1) {\n              numberOfAsserts++;\n            }\n            else if (node.type === 'MemberExpression' &&\n                node.object.name === vari[0] &&\n                node.property.name === 'expect') {\n              // will be specified later on but before nextTick\n              expected=true;\n            }\n          });\n\n          if(numberOfAsserts || expected) {\n            expect = numberOfAsserts;\n            current_domain = domain.create();\n            current_domain.on('error', domainHandler(name));\n            return current_domain.run(function () {\n              if(timeout) {\n                timer = setTimeout(function (){\n                  throw new Error(\"Timeout\");\n                }, timeout);\n              }\n              process.nextTick(function (){\n                var start = Date.now();\n                f(ensure_for(name, expect, tests, function (errors) {\n                  counts[name].duration = Date.now() - start;\n                  summary(name, counts[name], errors);\n                  run_tests(tests);\n                }));\n              });\n            });\n          } else {\n            summary(name, {ok: 0, fail: 1, notrun: 0, thrown: 0},\n              [' you need to add at least one `'+ vari[0] + '.*` call']);\n          }\n        } else {\n          summary(name, {ok: 0, fail: 1, notrun: 0, thrown: 0},\n            [' `assert` must be the first argument of your callback']);\n        }\n        counts._totals.fail++;\n        run_tests(tests);\n      }\n  }\n\n  spec = function specify_test(name, f) {\n    cache.push([].slice.call(arguments,0));\n  };\n\n  spec.reporter = function (f) {\n    if (typeof f === 'function') {\n      summary = f;\n      return;\n    }\n    else if (typeof f === 'string') {\n      var reporter = reporters[f + '.js'];\n      if(typeof reporter === 'function') {\n        summary = reporter;\n        return;\n      }\n    }\n    summary = def_summary;\n  };\n\n  spec.run = function run_all_tests(filter) {\n    if(typeof filter === \"function\") {\n      cache  = [[\"main\", filter]];\n      filter = [];\n    }\n    summary(module.parent.filename.replace(process.cwd(), \"\"));\n    startTime = Date.now();\n    filter = typeof filter === \"string\" ? [filter] : filter;\n    if(filter && filter.length !== 0) {\n      var filtered_cache = [];\n      filter.forEach(function (e) {\n        cache.forEach(function (c){\n          var name = c[0];\n          if(name===e) filtered_cache.push(c);\n        });\n      });\n      run_tests(filtered_cache);\n    }\n    else {\n      run_tests(cache);\n    }\n  };\n\n  function domainHandler(test_name) {\n    return function (err) {\n      var current_test = counts[test_name].meta;\n      if(counts[test_name].thrown > 0) {\n        // ignore, this test already thrown at least once\n        // lets just wait for the socket to c\n        return;\n      }\n      err_count++;\n      if(MAX_ERRORS === err_count) {\n        err.message = \"You have reached \" + MAX_ERRORS +\n          \" errors so we decided to abort your tests\\noriginal: \" +\n          err.message;\n        throw err;\n      }\n      err = typeof err === \"string\" ? new Error(err) : err; // idiotpatching\n      err.stacktrace = err.stack.split(\"\\n\").splice(1)\n        .map(function (l) { return l.replace(/^\\s+/,\"\"); });\n      counts[current_test.name].notrun += current_test.remaining_assertions;\n      counts._totals.notrun += current_test.remaining_assertions;\n      counts[current_test.name].thrown++;\n      counts._totals.thrown++;\n      current_test.errored.push(\n        {msg: err.message || err, assert: \"equal\", args: [\"domain\", err]});\n      summary(current_test.name, counts[current_test.name]\n        , current_test.errored);\n      run_tests(current_test.remaining);\n    };\n  }\n\n  return spec;\n})();\n","/home/travis/build/npmtest/node-npmtest-specify/node_modules/specify/reporters/compact.js":"var colors  = require('colors')\n  , tty     = require('tty')\n  , difflet = require('difflet')\n  , decycle = require('cycle').decycle\n  ;\n\nvar isatty = tty.isatty(1) && tty.isatty(2)\n  , width  = process.env.SPECIFY_MAXCOLS\n    ? process.env.SPECIFY_MAXCOLS\n    : isatty\n      ? process.stdout.getWindowSize\n        ? process.stdout.getWindowSize(1)[0]\n        : tty.getWindowSize\n          ? tty.getWindowSize()[1]\n          : 70\n      : 70\n  , current_test   = \"\"\n  , current_errors = {}\n  ;\n\nmodule.exports = function compact_reporter(name, report, errors) {\n  // starting a new file\n  if(typeof report === \"undefined\") {\n    current_test = name;\n    current_errors = {};\n  } else if (name === \"summary\") { // finished testing\n    var failed = report.fail + report.notrun\n      , left   = failed === 0 ? ('✔'.green) : ('✗'.red)\n      , right  = report.ok + '/' + (report.ok+failed)\n      ;\n    left += \" \" + current_test;\n    var dots = new Array(\n      Math.max(1, width - left.length - right.length)).join(\".\");\n    console.log(\"%s %s %s\", left, dots, right);\n    current_test   = \"\";\n    current_errors = {};\n  } else { // errors\n  \n  }\n};","/home/travis/build/npmtest/node-npmtest-specify/node_modules/specify/reporters/default.js":"var colors  = require('colors')\n  , difflet = require('difflet')\n  , decycle = require('cycle').decycle\n  ;\n\nmodule.exports = function default_reporter(name, report, errors) {\n  if(typeof report === \"undefined\") {\n    console.log();\n    console.log(\"  \" + name);\n    return console.log();\n  }\n  errors = errors || [];\n  var failed = report.fail + report.notrun;\n  var symbol = failed === 0 ? ('✔'.green) : ('✗'.red);\n  var right = report.ok + '/' + (report.ok+failed);\n  process.stdout.write(symbol + ' ');\n  process.stdout.write(right + ' ');\n  var d = '';\n  if(report.duration) {\n    d = 'took '.grey + (report.duration + 'ms').green;\n  }\n  console.log(name.cyan + \" \" + d);\n  errors.forEach(function(err) {\n    if(typeof err === \"string\") {\n      console.log('└───── '.grey + (err || \"Error\"));\n    } else {\n      console.log('└───── '.grey + (err.msg || \"Error\"));\n      process.stdout.write('❝ '.grey + err.assert + ' ');\n      if(err.assert === \"ok\") {\n        console.log(err.args[0]);\n      } else {\n        console.log();\n        if(err.args[0] && err.args[1] && typeof err.args[0]===\"object\" &&\n             typeof err.args[1]===\"object\") {\n          console.log(\n            difflet({ indent : 2, comment : true })\n              .compare(err.args[0], err.args[1]));\n        } else {\n          var indexzero = decycle(err.args[0] || \"undefined\")\n            , indexone  = decycle(err.args[1] || \"undefined\")\n            ;\n          try {\n            process.stdout.write(JSON.stringify(indexzero, null, 1).magenta);\n            console.log((\" // \" +\n              JSON.stringify(indexone, null, 1)).cyan);\n          } catch (ex) {\n            console.log(\" // { \\\"circular\\\": \\\"⥁\\\"}\".cyan);\n          }\n        }\n      }\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-specify/node_modules/specify/reporters/json.js":"var decycle = require('cycle').decycle;\n\nmodule.exports = function json_reporter(name, report, errors) {\n  var json_report = \n    { name   : name\n    , report : report\n    , errors : errors\n    };\n  console.log(JSON.stringify(decycle(json_report)));\n};"}